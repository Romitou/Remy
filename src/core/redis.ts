import { createClient } from 'redis';
import { BookNotification } from '../typings/bookAlerts';
import { container } from '@sapphire/framework';
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, Colors, EmbedBuilder } from 'discord.js';
import { convertTime12to24, frenchMealPeriod, normalizeDate } from './utils';

export async function subscribeBookNotifications() {
    const client = createClient({
        url: process.env.REDIS_URL,
        password: process.env.REDIS_PASSWORD,
    });

    try {
        await client.connect();
    } catch (e) {
        console.error(e);
    }

    await client.subscribe('book-notifications', async (message) => {
        const bookNotification: BookNotification = JSON.parse(message);

        const user = await container.client.users.fetch(bookNotification.discordId);

        const embed = new EmbedBuilder()
            .setTitle(`üì¨ Nouvelle notification de r√©servation`)
            .setColor(Colors.Navy)
            .setImage(bookNotification.restaurant.imageUrl)
            .setFooter({ text: `Alerte de disponibilit√© associ√©e √† votre notification n¬∞${bookNotification.bookAlertId}` })
            .setDescription('‚ñ´Ô∏è Ici R√©my, une table est **actuellement disponible √† la r√©servation** selon les crit√®res que vous avez d√©finis.\n‚ñ´Ô∏è Vous pouvez r√©server cette table en vous rendant sur **l\'application Disneyland Paris**.\n‚ñ´Ô∏è Si vous avez r√©ussi √† **r√©server cette table**, merci de me le faire savoir en **cliquant sur le bouton ci-dessous** : j\'arr√™terai de vous envoyer des notifications pour ce restaurant et ce repas !');

        embed.setFields([
            {
                name: 'üè¢ Restaurant',
                value: bookNotification.restaurant.name,
                inline: true,
            },
            {
                name: 'üìÖ Date',
                value: normalizeDate(bookNotification.date),
                inline: true,
            },
            {
                name: 'üïí Heure(s)',
                value: bookNotification.hours.map(convertTime12to24).join(', '),
                inline: true,
            },
            {
                name: 'üçΩÔ∏è Nombre de couverts',
                value: bookNotification.partyMix + ' couverts',
                inline: true,
            },
            {
                name: 'üòã P√©riode de repas',
                value: frenchMealPeriod(bookNotification.mealPeriod),
                inline: true,
            }
        ]);

        const componentRow = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`markNotificationSolved-${bookNotification.bookAlertId}`)
                    .setLabel('Marquer comme r√©serv√©')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('‚úÖ')
            );

        await user.send({
            embeds: [embed],
            components: [componentRow]
        });
    });
}
